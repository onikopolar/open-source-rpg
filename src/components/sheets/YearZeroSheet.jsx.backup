import React, { useState, useCallback, useMemo } from 'react';
import {
  Grid,
  Box,
  Typography,
  TextField,
  Button,
  Paper,
  Card,
  CardContent,
  Chip,
  IconButton,
  Alert,
  CircularProgress
} from '@mui/material';
import {
  Psychology,
  FitnessCenter,
  Security,
  Add,
  Remove,
  Warning,
  Casino
} from '@mui/icons-material';

/**
 * Componente de ficha especializada para o sistema Year Zero Engine
 * Segue o mesmo padrão de salvamento do sistema clássico
 */
const YearZeroSheet = ({ 
  character, 
  attributeValues = {},
  skillValues = {},
  onAttributeChange,
  onSkillChange,
  onSaveAttribute,
  onSaveSkill,
  attributeDiceModal, 
  diceRollModal,
  onQuickHeal,
  onQuickDamage,
  loadingStates = {},
  errors = {}
}) => {
  // Estados específicos do Year Zero Engine (não salvos no banco)
  const [stress, setStress] = useState(0);
  const [armor, setArmor] = useState(0);
  const [pushDice, setPushDice] = useState(false);
  const [trauma, setTrauma] = useState('');

  // Estados locais para habilidades do Year Zero (seguindo o mesmo padrão do clássico)
  const [yearZeroSkillValues, setYearZeroSkillValues] = useState({});

  // Constantes de configuração
  const STRESS_MAX = 10;
  const STRESS_CRITICAL_THRESHOLD = 8;
  const STRESS_HIGH_THRESHOLD = 5;
  const BASE_DICE_THRESHOLD_1 = 3;
  const BASE_DICE_THRESHOLD_2 = 5;

  /**
   * Obtém o valor de um atributo de forma segura - MESMA FUNÇÃO DO CLÁSSICO
   */
  const getAttributeValue = useCallback((charAttr) => {
    if (!charAttr || !charAttr.attribute) return '';
    
    const attributeId = charAttr.attribute.id;
    const value = attributeValues[attributeId] !== undefined 
      ? attributeValues[attributeId] 
      : charAttr.value;
    
    return value === 0 || value === '0' || value === '' ? '' : String(value);
  }, [attributeValues]);

  /**
   * Obtém o valor de uma habilidade do Year Zero - ADAPTADO DO CLÁSSICO
   */
  const getSkillValue = useCallback((skill) => {
    if (!skill) return '';
    const skillKey = `${skill.category}_${skill.name}`;
    const value = yearZeroSkillValues[skillKey] !== undefined 
      ? yearZeroSkillValues[skillKey] 
      : skill.value;
    
    return value === 0 || value === '0' || value === '' ? '' : String(value);
  }, [yearZeroSkillValues]);

  /**
   * Manipula mudança de habilidade Year Zero - MESMO PADRÃO DO CLÁSSICO
   */
  const handleSkillChange = useCallback((skill, newValue) => {
    const skillKey = `${skill.category}_${skill.name}`;
    setYearZeroSkillValues(prev => ({
      ...prev,
      [skillKey]: newValue
    }));
  }, []);

  /**
   * Salva habilidade Year Zero - MESMO PADRÃO DO CLÁSSICO
   */
  const handleSaveSkill = useCallback((skill) => {
    const skillKey = `${skill.category}_${skill.name}`;
    const value = yearZeroSkillValues[skillKey] || '0';
    
    // Aqui você pode implementar a chamada API para salvar habilidades Year Zero
    console.log(`Salvando habilidade ${skill.name}: ${value}`);
    
    // Exemplo de como seria a chamada API (adaptar para sua estrutura real)
    if (onSaveSkill) {
      onSaveSkill(skill, value);
    }
  }, [yearZeroSkillValues, onSaveSkill]);

  /**
   * Agrupa atributos por tipo para organização visual
   */
  const physicalAttributes = useMemo(() => {
    const physicalAttributeNames = ['Força', 'Destreza', 'Constituição', 'Agilidade'];
    return character?.attributes?.filter(attr => 
      attr?.attribute?.name && physicalAttributeNames.includes(attr.attribute.name)
    ) || [];
  }, [character?.attributes]);

  const mentalAttributes = useMemo(() => {
    const mentalAttributeNames = ['Inteligência', 'Sabedoria', 'Carisma', 'Percepção'];
    return character?.attributes?.filter(attr => 
      attr?.attribute?.name && mentalAttributeNames.includes(attr.attribute.name)
    ) || [];
  }, [character?.attributes]);

  /**
   * Habilidades específicas do Year Zero Engine
   */
  const yearZeroSkills = useMemo(() => [
    { name: 'Combate Corpo a Corpo', value: '0', category: 'Combate', attribute: 'Força' },
    { name: 'Combate à Distância', value: '0', category: 'Combate', attribute: 'Agilidade' },
    { name: 'Arremesso', value: '0', category: 'Combate', attribute: 'Força' },
    { name: 'Furtividade', value: '0', category: 'Sobrevivência', attribute: 'Agilidade' },
    { name: 'Sobrevivência', value: '0', category: 'Sobrevivência', attribute: 'Inteligência' },
    { name: 'Observação', value: '0', category: 'Sobrevivência', attribute: 'Percepção' },
    { name: 'Persuasão', value: '0', category: 'Social', attribute: 'Carisma' },
    { name: 'Intimidação', value: '0', category: 'Social', attribute: 'Força' },
    { name: 'Lábia', value: '0', category: 'Social', attribute: 'Carisma' },
    { name: 'Mecânica', value: '0', category: 'Técnica', attribute: 'Inteligência' },
    { name: 'Medicina', value: '0', category: 'Técnica', attribute: 'Inteligência' },
    { name: 'Tecnologia', value: '0', category: 'Técnica', attribute: 'Inteligência' }
  ], []);

  /**
   * Agrupa habilidades por categoria
   */
  const skillsByCategory = useMemo(() => {
    return yearZeroSkills.reduce((acc, skill) => {
      if (!acc[skill.category]) {
        acc[skill.category] = [];
      }
      acc[skill.category].push(skill);
      return acc;
    }, {});
  }, [yearZeroSkills]);

  /**
   * Manipula o aumento de estresse com validação
   */
  const handleStressIncrease = useCallback(() => {
    setStress(prev => prev < STRESS_MAX ? prev + 1 : prev);
  }, [STRESS_MAX]);

  const handleStressDecrease = useCallback(() => {
    setStress(prev => prev > 0 ? prev - 1 : prev);
  }, []);

  const handleArmorIncrease = useCallback(() => {
    setArmor(prev => prev + 1);
  }, []);

  const handleArmorDecrease = useCallback(() => {
    setArmor(prev => Math.max(0, prev - 1));
  }, []);

  /**
   * Calcula o número de dados base baseado nos atributos
   */
  const calculateBaseDice = useCallback((attributeValue) => {
    const value = parseInt(attributeValue) || 0;
    if (value >= BASE_DICE_THRESHOLD_2) return 2;
    if (value >= BASE_DICE_THRESHOLD_1) return 1;
    return 0;
  }, [BASE_DICE_THRESHOLD_1, BASE_DICE_THRESHOLD_2]);

  /**
   * Obtém o nível de severidade do estresse
   */
  const getStressSeverity = useCallback(() => {
    if (stress >= STRESS_CRITICAL_THRESHOLD) return 'error';
    if (stress >= STRESS_HIGH_THRESHOLD) return 'warning';
    return 'info';
  }, [stress, STRESS_CRITICAL_THRESHOLD, STRESS_HIGH_THRESHOLD]);

  /**
   * Obtém a mensagem de status do estresse
   */
  const getStressStatusMessage = useCallback(() => {
    if (stress >= STRESS_CRITICAL_THRESHOLD) return 'Estresse Crítico - Risco de Trauma';
    if (stress >= STRESS_HIGH_THRESHOLD) return 'Estresse Elevado - Cuidado com Panes';
    return 'Estresse Controlado';
  }, [stress, STRESS_CRITICAL_THRESHOLD, STRESS_HIGH_THRESHOLD]);

  /**
   * Valida entrada numérica - MESMA VALIDAÇÃO DO CLÁSSICO
   */
  const validateNumericInput = useCallback((event) => {
    const allowedKeys = ['Backspace', 'Delete', 'Tab', 'Escape', 'Enter', 'ArrowLeft', 'ArrowRight', 'Home', 'End'];
    if (allowedKeys.includes(event.key)) return;
    if (!/[0-9]/.test(event.key)) {
      event.preventDefault();
    }
  }, []);

  /**
   * Realiza uma rolagem no sistema Year Zero
   */
  const handleYearZeroRoll = useCallback((attributeName, attributeValue, skillValue = 0) => {
    if (!character?.id || !diceRollModal?.appear) {
      console.error('Dados insuficientes para rolagem');
      return;
    }

    const baseDice = calculateBaseDice(attributeValue);
    const skillDice = parseInt(skillValue) || 0;
    const totalDice = baseDice + skillDice;
    
    diceRollModal.appear({
      characterId: character.id,
      characterName: character.name,
      skillName: attributeName,
      skillValue: totalDice,
      system: 'yearzero',
      stress: stress,
      pushEnabled: pushDice
    });
  }, [character, diceRollModal, stress, pushDice, calculateBaseDice]);

  /**
   * Encontra o atributo relacionado a uma habilidade
   */
  const findRelatedAttribute = useCallback((attributeName) => {
    const allAttributes = [...physicalAttributes, ...mentalAttributes];
    return allAttributes.find(attr => attr.attribute?.name === attributeName);
  }, [physicalAttributes, mentalAttributes]);

  /**
   * Manipula rolagem de habilidade
   */
  const handleSkillRoll = useCallback((skill) => {
    const relatedAttribute = findRelatedAttribute(skill.attribute);
    handleYearZeroRoll(skill.name, getAttributeValue(relatedAttribute), getSkillValue(skill));
  }, [findRelatedAttribute, handleYearZeroRoll, getAttributeValue, getSkillValue]);

  /**
   * Manipula rolagem de atributo
   */
  const handleAttributeRoll = useCallback((charAttr) => {
    handleYearZeroRoll(charAttr.attribute?.name, getAttributeValue(charAttr));
  }, [handleYearZeroRoll, getAttributeValue]);

  /**
   * Manipula mudança de atributo - MESMA LÓGICA DO CLÁSSICO
   */
  const handleAttributeChangeSafe = useCallback((attributeId, value) => {
    if (onAttributeChange) {
      onAttributeChange(attributeId, value);
    }
  }, [onAttributeChange]);

  /**
   * Manipula salvamento de atributo - MESMA LÓGICA DO CLÁSSICO
   */
  const handleSaveAttributeSafe = useCallback((attributeId) => {
    if (onSaveAttribute) {
      onSaveAttribute(attributeId);
    }
  }, [onSaveAttribute]);

  /**
   * Renderiza um atributo individual - MESMA ESTRUTURA DO CLÁSSICO
   */
  const renderAttribute = useCallback((charAttr, color, backgroundColor) => {
    if (!charAttr?.attribute?.id) return null;

    const attributeId = charAttr.attribute.id;
    const isLoading = loadingStates[`attribute-${attributeId}`];
    const error = errors[`attribute-${attributeId}`];
    const attributeValue = getAttributeValue(charAttr);

    return (
      <Grid item xs={12} sm={6} md={3} key={attributeId}>
        <Paper elevation={2} sx={{ 
          padding: 2, 
          textAlign: 'center', 
          backgroundColor: backgroundColor 
        }}>
          <Typography variant="h6" sx={{ 
            fontWeight: 'bold', 
            color: color, 
            marginBottom: 1 
          }}>
            {charAttr.attribute.name}
          </Typography>
          
          <TextField
            value={attributeValue}
            variant="outlined"
            size="small"
            sx={{ width: 60, marginBottom: 1 }}
            inputProps={{
              style: { textAlign: 'center' },
              inputMode: 'numeric'
            }}
            onBlur={() => handleSaveAttributeSafe(attributeId)}
            onChange={(event) => handleAttributeChangeSafe(attributeId, event.target.value)}
            onKeyDown={validateNumericInput}
            placeholder="0"
            disabled={isLoading}
            error={!!error}
            helperText={error}
          />
          
          <Box sx={{ marginBottom: 1 }}>
            <Typography variant="caption" color="text.secondary">
              Dados Base: {calculateBaseDice(attributeValue)}
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>
            <Button 
              variant="outlined"
              size="small"
              onClick={() => handleAttributeRoll(charAttr)}
              sx={{ 
                borderColor: color,
                color: color,
                '&:hover': {
                  backgroundColor: color,
                  color: 'white'
                }
              }}
              disabled={isLoading}
            >
              <Casino sx={{ marginRight: 0.5, fontSize: 18 }} />
              Rolar
            </Button>
            
            {isLoading && <CircularProgress size={20} />}
          </Box>
        </Paper>
      </Grid>
    );
  }, [getAttributeValue, handleSaveAttributeSafe, handleAttributeChangeSafe, calculateBaseDice, handleAttributeRoll, validateNumericInput, loadingStates, errors]);

  /**
   * Renderiza uma habilidade individual - MESMO PADRÃO DO CLÁSSICO
   */
  const renderSkill = useCallback((skill, index) => {
    const skillValue = getSkillValue(skill);
    const skillKey = `${skill.category}_${skill.name}`;
    const isLoading = loadingStates[`skill-${skillKey}`];
    const error = errors[`skill-${skillKey}`];
    
    return (
      <Grid item xs={12} md={6} key={index}>
        <Box sx={{ 
          padding: 2, 
          border: '2px solid #c8e6c9', 
          borderRadius: 1,
          display: 'flex',
          alignItems: 'center',
          gap: 2,
          backgroundColor: '#f1f8e9'
        }}>
          <Box sx={{ flexGrow: 1 }}>
            <Typography variant="h6" sx={{ fontWeight: 'bold', color: '#2e7d32' }}>
              {skill.name}
            </Typography>
            <Typography variant="caption" color="text.secondary">
              Atributo: {skill.attribute}
            </Typography>
          </Box>
          
          <TextField
            value={skillValue}
            variant="outlined"
            size="small"
            sx={{ width: 60 }}
            inputProps={{
              style: { textAlign: 'center' },
              inputMode: 'numeric'
            }}
            onBlur={() => handleSaveSkill(skill)}
            onChange={(event) => handleSkillChange(skill, event.target.value)}
            onKeyDown={validateNumericInput}
            placeholder="0"
            disabled={isLoading}
            error={!!error}
            helperText={error}
          />
          
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <Button 
              variant="outlined" 
              size="small"
              onClick={() => handleSkillRoll(skill)}
              sx={{ 
                borderColor: '#2e7d32',
                color: '#2e7d32',
                '&:hover': {
                  backgroundColor: '#2e7d32',
                  color: 'white'
                }
              }}
              disabled={isLoading}
            >
              Rolar
            </Button>
            
            {isLoading && <CircularProgress size={20} />}
          </Box>
        </Box>
      </Grid>
    );
  }, [getSkillValue, handleSkillChange, handleSaveSkill, handleSkillRoll, validateNumericInput, loadingStates, errors]);

  // Verificação de segurança para o personagem
  if (!character) {
    return (
      <Alert severity="error" sx={{ marginBottom: 3 }}>
        Dados do personagem não disponíveis
      </Alert>
    );
  }

  return (
    <Box>
      <Alert severity="info" sx={{ marginBottom: 3, borderRadius: 2 }}>
        <strong>Sistema Year Zero Engine Ativo</strong> - Utilize as mecânicas específicas: Dados Base, Push de Dados e Controle de Estresse.
      </Alert>

      {/* Seção de Atributos Físicos - MESMO PADRÃO DO CLÁSSICO */}
      <Card sx={{ marginBottom: 3 }}>
        <CardContent>
          <Typography variant="h5" sx={{ 
            fontWeight: 'bold', 
            marginBottom: 2, 
            color: '#ed6c02', 
            display: 'flex', 
            alignItems: 'center', 
            gap: 1 
          }}>
            <FitnessCenter sx={{ fontSize: 28 }} />
            Atributos Físicos
          </Typography>
          <Grid container spacing={2}>
            {physicalAttributes.map((charAttr) => 
              renderAttribute(charAttr, '#ed6c02', '#fff3e0')
            )}
          </Grid>
        </CardContent>
      </Card>

      {/* Seção de Atributos Mentais - MESMO PADRÃO DO CLÁSSICO */}
      <Card sx={{ marginBottom: 3 }}>
        <CardContent>
          <Typography variant="h5" sx={{ 
            fontWeight: 'bold', 
            marginBottom: 2, 
            color: '#1976d2', 
            display: 'flex', 
            alignItems: 'center', 
            gap: 1 
          }}>
            <Psychology sx={{ fontSize: 28 }} />
            Atributos Mentais
          </Typography>
          <Grid container spacing={2}>
            {mentalAttributes.map((charAttr) => 
              renderAttribute(charAttr, '#1976d2', '#e3f2fd')
            )}
          </Grid>
        </CardContent>
      </Card>

      {/* Seção de Habilidades por Categoria - MESMO PADRÃO DO CLÁSSICO */}
      {Object.entries(skillsByCategory).map(([category, skills]) => (
        <Card key={category} sx={{ marginBottom: 3 }}>
          <CardContent>
            <Typography variant="h5" sx={{ fontWeight: 'bold', marginBottom: 2, color: '#2e7d32' }}>
              {category}
            </Typography>
            <Grid container spacing={2}>
              {skills.map((skill, index) => renderSkill(skill, index))}
            </Grid>
          </CardContent>
        </Card>
      ))}

      {/* Seção de Recursos do Year Zero (estados locais) */}
      <Grid container spacing={3}>
        {/* Controle de Estresse */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h5" sx={{ 
                fontWeight: 'bold', 
                marginBottom: 2, 
                color: '#d32f2f', 
                display: 'flex', 
                alignItems: 'center', 
                gap: 1 
              }}>
                <Warning sx={{ fontSize: 28 }} />
                Controle de Estresse
              </Typography>
              
              <Box sx={{ textAlign: 'center', marginBottom: 2 }}>
                <Typography variant="h3" sx={{ fontWeight: 'bold', color: '#d32f2f' }}>
                  {stress}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Nível de Estresse
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', justifyContent: 'center', gap: 1, marginBottom: 2 }}>
                <IconButton
                  color="error"
                  onClick={handleStressDecrease}
                  disabled={stress === 0}
                  sx={{ 
                    border: '2px solid #d32f2f',
                    backgroundColor: '#ffebee'
                  }}
                >
                  <Remove />
                </IconButton>
                
                <IconButton
                  color="error"
                  onClick={handleStressIncrease}
                  disabled={stress >= STRESS_MAX}
                  sx={{ 
                    border: '2px solid #d32f2f',
                    backgroundColor: '#ffebee'
                  }}
                >
                  <Add />
                </IconButton>
              </Box>

              <Alert 
                severity={getStressSeverity()} 
                sx={{ borderRadius: 1 }}
              >
                {getStressStatusMessage()}
              </Alert>
            </CardContent>
          </Card>
        </Grid>

        {/* Armadura e Defesa */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h5" sx={{ 
                fontWeight: 'bold', 
                marginBottom: 2, 
                color: '#5d4037', 
                display: 'flex', 
                alignItems: 'center', 
                gap: 1 
              }}>
                <Security sx={{ fontSize: 28 }} />
                Armadura e Defesa
              </Typography>
              
              <Box sx={{ textAlign: 'center', marginBottom: 2 }}>
                <Typography variant="h3" sx={{ fontWeight: 'bold', color: '#5d4037' }}>
                  {armor}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Valor de Armadura
                </Typography>
              </Box>

              <Box sx={{ display: 'flex', justifyContent: 'center', gap: 1, marginBottom: 2 }}>
                <IconButton
                  onClick={handleArmorDecrease}
                  disabled={armor === 0}
                  sx={{ 
                    border: '2px solid #5d4037',
                    color: '#5d4037'
                  }}
                >
                  <Remove />
                </IconButton>
                
                <IconButton
                  onClick={handleArmorIncrease}
                  sx={{ 
                    border: '2px solid #5d4037',
                    color: '#5d4037'
                  }}
                >
                  <Add />
                </IconButton>
              </Box>

              <Box sx={{ marginTop: 2 }}>
                <Typography variant="subtitle2" sx={{ fontWeight: 'bold', marginBottom: 1 }}>
                  Configurações de Jogo
                </Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                  <Chip 
                    label={pushDice ? "Push de Dados Ativo" : "Push de Dados Inativo"} 
                    color={pushDice ? "primary" : "default"}
                    onClick={() => setPushDice(!pushDice)}
                    variant={pushDice ? "filled" : "outlined"}
                  />
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Informações do Sistema */}
      <Card sx={{ marginTop: 3 }}>
        <CardContent>
          <Typography variant="h6" sx={{ fontWeight: 'bold', marginBottom: 2 }}>
            Sobre o Year Zero Engine
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ lineHeight: 1.6 }}>
            O Year Zero Engine utiliza um sistema de dados onde você rola dados base (determinados pelos atributos) 
            mais dados de habilidade. Cada 6 é um sucesso. Você pode fazer um "push" para rerrolar dados que não 
            mostraram 6 ou 1, mas cada 1 em um push aumenta seu estresse.
          </Typography>
        </CardContent>
      </Card>
    </Box>
  );
};

export default YearZeroSheet;
