generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Character {
  id                             Int                   @id @default(autoincrement())
  name                           String
  age                            Int?
  gender                         String?
  player_name                    String?
  rpg_system                     String                @default("classic")
  current_hit_points             Int                   @default(0)
  max_hit_points                 Int                   @default(0)
  current_picture                Int                   @default(1)
  is_dead                        Boolean               @default(false)
  standard_character_picture_url String?
  injured_character_picture_url  String?
  created_at                     DateTime              @default(now())
  attributes                     CharacterAttributes[]
  skills                         CharacterSkills[]
  rolls                          Roll[]

  @@index([name])
  @@index([player_name])
  @@index([rpg_system])
  @@index([created_at])
  @@map("character")
}

model CharacterAttributes {
  character_id Int
  attribute_id Int
  value        String?
  attribute    Attribute @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  character    Character @relation(fields: [character_id], references: [id], onDelete: Cascade)

  @@id([character_id, attribute_id])
  @@map("character_attributes")
}

model Attribute {
  id          Int                   @id @default(autoincrement())
  name        String                @unique
  description String?
  characters  CharacterAttributes[]

  @@index([name])
  @@map("attribute")
}

model CharacterSkills {
  character_id Int
  skill_id     Int
  value        String?
  skill        Skill     @relation(fields: [skill_id], references: [id], onDelete: Cascade)
  character    Character @relation(fields: [character_id], references: [id], onDelete: Cascade)

  @@id([character_id, skill_id])
  @@map("character_skills")
}

model Skill {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  characters  CharacterSkills[]

  @@index([name])
  @@map("skills")
}

model Roll {
  id            Int       @id @default(autoincrement())
  max_number    Int
  rolled_number Int
  character_id  Int
  rolled_at     DateTime  @default(now())
  character     Character @relation(fields: [character_id], references: [id], onDelete: Cascade)

  @@index([character_id])
  @@index([rolled_at])
  @@map("roll")
}

model Config {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  value String?

  @@index([name])
  @@map("config")
}
